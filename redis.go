package redisdb

import (
	"context"
	"time"

	"github.com/redis/go-redis/v9"
	log "github.com/skrolikov/vira-logger"
)

// Config –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis.
type Config struct {
	Addr     string
	Password string
	DB       int
}

// Redis –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ Redis.
type Redis struct {
	client *redis.Client
	logger *log.Logger
}

// New —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
func New(ctx context.Context, cfg Config, logger *log.Logger) (*Redis, error) {
	rdb := redis.NewClient(&redis.Options{
		Addr:     cfg.Addr,
		Password: cfg.Password,
		DB:       cfg.DB,
	})

	// –ü–∏–Ω–≥ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	pingCtx, cancel := context.WithTimeout(ctx, 5*time.Second)
	defer cancel()

	if _, err := rdb.Ping(pingCtx).Result(); err != nil {
		logger.Error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: %v", err)
		return nil, err
	}

	logger.Info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ: %s", cfg.Addr)

	return &Redis{client: rdb, logger: logger}, nil
}

// Client –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π *redis.Client.
func (r *Redis) Client() *redis.Client {
	return r.client
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis.
func (r *Redis) Close() error {
	err := r.client.Close()
	if err != nil {
		r.logger.Error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Redis: %v", err)
	} else {
		r.logger.Info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
	}
	return err
}
